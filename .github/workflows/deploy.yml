name: CI/CD Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      force_fail:
        description: "Fail tests on purpose (demo the gate)?"
        required: false
        default: "false"
        
permissions:
  contents: write

jobs:
  # === 🏗️ 1. Build job ===
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build project
        run: |
          echo "🏗️ Building project..."
          npm ci
          npm run build
          zip -r build.zip dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build.zip

  # === ✅ 1.1 Unit tests ===
  test-unit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: npm ci || npm i

      # ⬇️ 故意讓測試失敗（只在你勾選時）
      - name: Fail on purpose (demo)
        if: ${{ github.event.inputs.force_fail == 'true' }}
        run: |
          echo "❌ Forcing unit test failure for demo"; exit 1

      - name: Run unit tests
        run: npm run test:unit


  # === ✅ 1.2 Integration tests (runs on built artifact) ===
  test-integration:
    needs: test-unit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4               # ⬅️ 需要這個，npm 才找得到 package.json
      - uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: .                                # 下載到當前目錄
      - name: Normalize artifact path (optional but safe)
        run: |
          if [ -f build-artifact/build.zip ]; then mv build-artifact/build.zip .; fi
          ls -lah
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Run integration tests on build.zip
        run: npm run test:integration


  # === 🚀 2. Deploy to Dev ===
  deploy-dev:
    needs: test-integration
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Dev Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: dev-v1.0
          NOTE: "Development build release"
        run: |
          echo "🚀 Deploying development release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          git push origin :refs/tags/"$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  # === 🧪 3. Deploy to Staging ===
  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Staging Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: staging-v1.0
          NOTE: "Testing pre-production release"
        run: |
          echo "🧪 Deploying staging release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          git push origin :refs/tags/"$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"

  # === 🎉 4. Deploy to Production ===
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Release Production Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: prod-v1.0
          NOTE: "Stable production release"
        run: |
          echo "🎉 Deploying production release..."
          gh release delete "$TAG" -y || true
          git tag -d "$TAG" || true
          git push origin :refs/tags/"$TAG" || true
          gh release create "$TAG" build.zip --notes "$NOTE"
